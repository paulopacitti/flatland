#include "Logger.hpp"
#include <chrono>
#include <ctime>
#include <iostream>

// ANSI escape codes for colors
const std::string RED("\033[31m");
const std::string YELLOW("\033[33m");
const std::string GREEN("\033[32m");
const std::string RESET("\033[0m");

/**
 * Holds a collection of log entries.
 *
 * This vector stores instances of LogEntry, which represent individual log
 * messages. It is used to keep track of all log messages generated by the
 * Logger.
 */
std::vector<LogEntry> Logger::m_messages;

/**
 * Generates a timestamp string in ISO 8601 format.
 *
 * This function retrieves the current system time and formats it as a string
 * in the ISO 8601 format (YYYY-MM-DDTHH:MM:SS).
 *
 * Returns a string representing the current timestamp in ISO 8601 format.
 */
std::string getTimestamp() {
  std::time_t now =
      std::chrono::system_clock::to_time_t(std::chrono::system_clock::now());
  std::string output(30, '\0');
  std::strftime(&output[0], output.size(), "%Y-%m-%dT%H:%M:%S",
                std::localtime(&now));

  return output;
}

/**
 * Logs an informational message.
 *
 * This function creates a log entry with the type set to INFO and the provided
 * message. The message is prefixed with a timestamp and the "INFO" label. The
 * log entry is then added to the internal message list and printed to the
 * console in green color.
 *
 * @param message The informational message to log.
 */
void Logger::info(const std::string &message) {
  LogEntry logEntry;
  logEntry.type = INFO;
  logEntry.message = "[" + getTimestamp() + "] INFO: " + message;
  m_messages.push_back(logEntry);

  std::cout << GREEN << logEntry.message << RESET << std::endl;
}

/**
 * Logs an error message.
 *
 * This function creates a log entry with the specified error message,
 * prepends it with a timestamp and the "ERROR" label, and adds it to the
 * list of log messages. The error message is also printed to the standard
 * output with red color formatting.
 *
 * @param message The error message to be logged.
 */
void Logger::error(const std::string &message) {
  LogEntry logEntry;
  logEntry.type = ERROR;
  logEntry.message = "[" + getTimestamp() + "] ERROR: " + message;
  m_messages.push_back(logEntry);

  std::cout << RED << logEntry.message << RESET << std::endl;
}

/**
 * Logs a warning message.
 *
 * This function creates a log entry with a warning type and the provided
 * message. The message is prefixed with a timestamp and the "WARNING" label.
 * The log entry is then added to the list of messages and printed to the
 * console with a yellow color.
 *
 * @param message The warning message to be logged.
 */
void Logger::warning(const std::string &message) {
  LogEntry logEntry;
  logEntry.type = WARNING;
  logEntry.message = "[" + getTimestamp() + "] WARNING: " + message;
  m_messages.push_back(logEntry);

  std::cout << YELLOW << logEntry.message << RESET << std::endl;
}

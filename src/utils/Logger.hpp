/*
 * toy logger implementation using std::cout. Not fast enough ot be used in the
 * engine. Use spdlog instead.
 */

#ifndef LOGGER_HPP
#define LOGGER_HPP
#include <chrono>
#include <ctime>
#include <iostream>
#include <string>
#include <vector>

// ANSI escape codes for colors
const std::string RED("\033[31m");
const std::string YELLOW("\033[33m");
const std::string GREEN("\033[32m");
const std::string RESET("\033[0m");
enum LogType { INFO, WARNING, ERROR };

struct LogEntry {
    LogType type;
    std::string message;
};

/**
 * Generates a timestamp string in ISO 8601 format.
 *
 * This function retrieves the current system time and formats it as a string
 * in the ISO 8601 format (YYYY-MM-DDTHH:MM:SS).
 *
 * Returns a string representing the current timestamp in ISO 8601 format.
 */
inline std::string getTimestamp() {
  std::time_t now =
      std::chrono::system_clock::to_time_t(std::chrono::system_clock::now());
  std::string output(30, '\0');
  std::strftime(&output[0], output.size(), "%Y-%m-%dT%H:%M:%S",
                std::localtime(&now));

  return output;
}

class Logger {
  public:
    /**
     * Holds a collection of log entries.
     *
     * This vector stores instances of LogEntry, which represent individual log
     * messages. It is used to keep track of all log messages generated by the
     * Logger.
     */
    static std::vector<LogEntry> m_messages;

    /**
     * Logs an informational message. The message is prefixed with a timestamp
     * and the "INFO" label. The log entry is then added to the internal message
     * list and printed to the console in green color.
     */
    static void info(const std::string& message) {
      LogEntry logEntry;
      logEntry.type = INFO;
      logEntry.message = "[" + getTimestamp() + "] INFO: " + message;
      m_messages.push_back(logEntry);

      std::cout << GREEN << logEntry.message << RESET << std::endl;
    }

    static void error(const std::string& message) {
      LogEntry logEntry;
      logEntry.type = ERROR;
      logEntry.message = "[" + getTimestamp() + "] ERROR: " + message;
      m_messages.push_back(logEntry);

      std::cout << RED << logEntry.message << RESET << std::endl;
    }

    /**
     * Logs a warning message. The message is prefixed with a timestamp and the
     * "WARNING" label. The log entry is then added to the list of messages and
     * printed to the console with a yellow color.
     */
    void warning(const std::string& message) {
      LogEntry logEntry;
      logEntry.type = WARNING;
      logEntry.message = "[" + getTimestamp() + "] WARNING: " + message;
      m_messages.push_back(logEntry);

      std::cout << YELLOW << logEntry.message << RESET << std::endl;
    }
};

#endif